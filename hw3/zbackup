#!/usr/local/bin/python3.6
import argparse
import datetime
import os
import re
import shlex
import subprocess


def run(cmd):
    try:
        proc = subprocess.run(
            shlex.split(cmd),
            check=True,
            stdout=subprocess.PIPE,
            encoding='utf-8')
    except subprocess.CalledProcessError as e:
        exit(e.returncode)
    return proc.stdout


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-l', '--list', action='store_true')
    parser.add_argument('-d', '--delete', action='store_true')
    parser.add_argument('-e', '--export', action='store_true')
    parser.add_argument('-i', '--import', action='store_true')
    parser.add_argument('dataset', nargs='?')
    parser.add_argument('positional', nargs='?')
    args = parser.parse_args()
    if args.__dict__['import']:
        dataset, filename = args.positional, args.dataset
        if not dataset:
            parser.error('the following arguments are required: dataset')
        if not filename:
            parser.error('the following arguments are required: filename')
        # delete
        # snapshots = run('zfs list -t snapshot')
        # snap = re.findall(f'{dataset}@\S*', snapshots)
        # for sp in snap:
        #     cmd = f'zfs destroy {sp}'
        #     run(cmd)
        # import
        date = datetime.datetime.now().strftime('%Y-%m-%d_%H:%M:%S')
        name = f'{dataset}@{date}'
        cmd = f'openssl enc -d -aes256 -pbkdf2 -in {filename} | gunzip | zfs recv -F {name}'
        os.system(cmd)
        cmd = f'zfs rollback -r {name}'
        os.system(cmd)
        print(f'Import {filename} to {name}')
    elif args.export:
        dataset = args.dataset
        if not dataset:
            parser.error('the following arguments are required: dataset')
        dsid = 0
        if args.positional:
            dsid = int(args.positional) - 1
        snapshots = run('zfs list -t snapshot')
        snap = re.findall(f'{dataset}@\S*', snapshots)
        sp = snap[dsid]
        print(sp)
        name = sp.replace('_', '-')
        print(name)
        cmd = f'zfs send {sp} | gzip | openssl enc -e -aes256 -pbkdf2 -out /tmp/{name}.gz.enc'
        os.system(cmd)
        print(f'Export {sp} to /tmp/{name}.gz.enc')
    elif args.delete:
        try:
            list_id = int(args.dataset)
            dataset = '.*'
            snapshots = run('zfs list -t snapshot')
            snap = re.findall(f'{dataset}@\S*', snapshots)
            cmd = f'zfs destroy {snap[list_id - 1]}'
            run(cmd)
            print(f'Destroy ', snap[list_id - 1])
        except:
            if args.dataset:
                dataset = args.dataset
                snapshots = run('zfs list -t snapshot')
                snap = re.findall(f'{dataset}@\S*', snapshots)
                try:
                    list_id = int(args.positional)
                    cmd = f'zfs destroy {snap[list_id - 1]}'
                    run(cmd)
                    print(f'Destroy ', snap[list_id - 1])
                except:
                    for i, sp in enumerate(snap): 
                        cmd = f'zfs destroy {sp}'
                        run(cmd)
                        print(f'Destroy ', sp)
            else:
                dataset = '.*'
                snapshots = run('zfs list -t snapshot')
                snap = re.findall(f'{dataset}@\S*', snapshots)
                for i, sp in enumerate(snap):
                    cmd = f'zfs destroy {sp}'
                    run(cmd)
                    print(f'Destroy ', sp)
    elif args.list:
        try:
	        list_id = int(args.dataset)
	        dataset = '.*'
	        snapshots=run('zfs list -t snapshot')
	        snap = re.findall(f'{dataset}@\S*',snapshots)
	        ds,t = snap[list_id-1].split('@')
	        print('ID','Dataset','Time',sep='\t')
	        print(list_id,ds,t,sep='\t')
        except:
	        if args.dataset:
		        dataset = args.dataset
		        snapshots = run('zfs list -t snapshot')
		        snap = re.findall(f'{dataset}@\S*', snapshots)
		        try:
			        list_id = int(args.positional)
			        ds,t = snap[list_id-1].split('@')
			        print('ID','Dataset','Time',sep='\t')
			        print(list_id,ds,t.replace('_', ' '),sep='\t')
		        except:
			        print('ID','Dataset','Time',sep='\t')
			        for i, sp in enumerate(snap):
				        ds, t = sp.split('@')
				        print(i + 1, ds, t.replace('_', ' '), sep='\t')
	        else:
		        dataset = '.*'
		        snapshots = run('zfs list -t snapshot')
		        snap = re.findall(f'{dataset}@\S*', snapshots)
		        print('ID','Dataset','Time',sep='\t')
		        for i, sp in enumerate(snap):
			        ds, t = sp.split('@')
			        print(i+1, ds, t.replace('_', ' '), sep='\t')
    else:
        dataset = args.dataset
        if not dataset:
            parser.error('the following arguments are required: dataset')
        count = 20
        if args.positional:
            count = int(args.positional)
        snapshots = run('zfs list -t snapshot')
        snap = re.findall(f'{dataset}@\S*', snapshots)
        if len(snap) >= count:
            tsnap = list(snap)
            sorted(tsnap, key=lambda x: datetime.datetime.strptime(x, f'{dataset}@%Y-%m-%d_%H:%M:%S'))
            dc = len(tsnap) - count + 1
            tsnap = tsnap[0:dc]
            for sp in tsnap:
                cmd = f'zfs destroy {sp}'
                run(cmd)
                print(f'Destroy {sp}')
        date = datetime.datetime.now().strftime('%Y-%m-%d_%H:%M:%S')
        cmd = f'zfs snapshot {dataset}@{date}'
        run(cmd)
        print(f'Snap {dataset}@{date}')


if __name__ == '__main__':
    main()
